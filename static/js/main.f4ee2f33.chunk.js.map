{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","useState","storageValue","accounts","contract","state","setState","inputRef","useRef","setEventValue","setSetEventValue","useEffect","eth","getAccounts","net","getId","networkId","deployedNetwork","SimpleStorageContract","networks","instance","Contract","abi","address","methods","get","call","value","events","SetEvent","on","event","returnValues","changed","str","alert","error","s","handleSubmit","e","preventDefault","current","toUpperCase","set","send","from","className","onSubmit","type","ref","onChange","target","slice","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0PAqCeA,EAnCC,kBACd,IAAIC,SAAQ,SAACC,EAASC,GAEpBC,OAAOC,iBAAiB,OAAxB,sBAAgC,kCAAAC,EAAA,0DAE1BF,OAAOG,SAFmB,wBAGtBC,EAAO,IAAIC,IAAKL,OAAOG,UAHD,kBAMpBH,OAAOG,SAASG,SANI,OAQ1BR,EAAQM,GARkB,gDAU1BL,EAAO,EAAD,IAVoB,gCAcrBC,OAAOI,MAERA,EAAOJ,OAAOI,KACpBG,QAAQC,IAAI,2BACZV,EAAQM,KAIFK,EAAW,IAAIJ,IAAKK,UAAUC,aAClC,yBAEIP,EAAO,IAAIC,IAAKI,GACtBF,QAAQC,IAAI,gDACZV,EAAQM,IA3BoB,8D,oOC6FrBQ,MA5Ff,WAAgB,IAAD,EACaC,mBAAS,CAAEC,aAAc,EAAGV,KAAM,KAAMW,SAAU,KAAMC,SAAU,OAD/E,mBACNC,EADM,KACCC,EADD,KAEPC,EAAWC,mBAFJ,EAG6BP,mBAAU,GAHvC,mBAGNQ,EAHM,KAGSC,EAHT,KAKbC,qBAAU,WACR,sBAAC,sCAAArB,EAAA,+EAGsBN,IAHtB,cAGSQ,EAHT,gBAM0BA,EAAKoB,IAAIC,cANnC,cAMSV,EANT,gBAS2BX,EAAKoB,IAAIE,IAAIC,QATxC,cASSC,EATT,OAUSC,EAAkBC,EAAsBC,SAASH,GACjDI,EAAW,IAAI5B,EAAKoB,IAAIS,SAC5BH,EAAsBI,IACtBL,GAAmBA,EAAgBM,SAGrC5B,QAAQC,IAAIwB,GAhBf,UAkBqBA,EAASI,QAAQC,MAAMC,OAlB5C,eAkBOC,EAlBP,OAqBGrB,EAAS,CAAEJ,aAAcyB,EAAOnC,KAAMA,EAAMW,SAAUA,EAAUC,SAAUgB,IArB7E,UAuBSA,EAASQ,OAAOC,WACnBC,GAAG,QAAQ,SAAAC,GACV,IAAIJ,EAAQI,EAAMC,aAAaL,MAC/BhC,QAAQC,IAAI+B,GACZjB,EAAiBiB,MAElBG,GAAG,WAAW,SAAAG,GAAO,OAAItC,QAAQC,IAAIqC,MAErCH,GAAG,aAAa,SAAAI,GAAG,OAAIvC,QAAQC,IAAIsC,MA/BzC,0DAmCGC,MAAM,0EAGNxC,QAAQyC,MAAR,MAtCH,yDAAD,KAyCC,IAEHzB,qBAAU,WACRL,GAAS,SAAA+B,GAAC,O,yVAAA,IAASA,EAAT,CAAYnC,aAAcO,SACnC,CAACA,IAEJ,IAAM6B,EAAY,uCAAG,WAAOC,GAAP,mBAAAjD,EAAA,6DACnBiD,EAAEC,iBACMrC,EAAuBE,EAAvBF,SAAUC,EAAaC,EAAbD,SACduB,EAAQpB,EAASkC,QAAQd,MAAMe,cAHhB,SAIbtC,EAASoB,QAAQmB,IAAIhB,GAAOiB,KAAK,CAAEC,KAAM1C,EAAS,KAJrC,2CAAH,sDAalB,OAAKE,EAAMb,KAKT,yBAAKsD,UAAU,OACb,2CACA,uEACA,sDACA,sIAIA,+DACmC,2CADnC,eAGA,0BAAMC,SAAUT,EAAcQ,UAAU,QACtC,+BACE,2BAAOE,KAAK,OAAOC,IAAK1C,EAAU2C,SAxBrB,SAACX,GAChBA,EAAEY,OAAOxB,MAAQ,IACnBY,EAAEY,OAAOxB,MAAQY,EAAEY,OAAOxB,MAAMyB,MAAM,EAAG,KAsBqBN,UAAU,WAEtE,2BAAOE,KAAK,SAASrB,MAAM,MAAMmB,UAAU,YAE7C,qDAA2BzC,EAAMH,eArB5B,yEC7DSmD,QACW,cAA7BjE,OAAOkE,SAASC,UAEe,UAA7BnE,OAAOkE,SAASC,UAEhBnE,OAAOkE,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.f4ee2f33.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { useEffect, useState, useRef } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nfunction App() {\n  const [state, setState] = useState({ storageValue: 0, web3: null, accounts: null, contract: null });\n  const inputRef = useRef();\n  const [setEventValue, setSetEventValue] = useState (0)\n  \n  useEffect(() => {\n    (async function () {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3();\n\n        // Use web3 to get the user's accounts.\n        const accounts = await web3.eth.getAccounts();\n\n        // Get the contract instance.\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = SimpleStorageContract.networks[networkId];\n        const instance = new web3.eth.Contract(\n          SimpleStorageContract.abi,\n          deployedNetwork && deployedNetwork.address,\n        );\n\n        console.log(instance);\n\n        let value = await instance.methods.get().call();\n        // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n        setState({ storageValue: value, web3: web3, accounts: accounts, contract: instance });\n\n        await instance.events.SetEvent()\n          .on('data', event => {\n            let value = event.returnValues.value;\n            console.log(value);\n            setSetEventValue(value);\n          })\n          .on('changed', changed => console.log(changed))\n          // .on('error', err => throw err)\n          .on('connected', str => console.log(str))\n\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\n          `Failed to load web3, accounts, or contract. Check console for details.`,\n        );\n        console.error(error);\n      }\n    })();\n  }, [])\n\n  useEffect(()=> {\n    setState(s => ({...s, storageValue: setEventValue}))\n  }, [setEventValue])\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const { accounts, contract } = state;\n    let value = inputRef.current.value.toUpperCase();\n    await contract.methods.set(value).send({ from: accounts[0] });\n  }\n\n  const handleChange = (e) => {\n    if (e.target.value < 0) {\n      e.target.value = e.target.value.slice(0, 0);\n    }\n  }\n\n  if (!state.web3) {\n    return <div>Loading Web3, accounts, and contract...</div>;\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Good to Go!</h1>\n      <p>Your Truffle Box is installed and ready.</p>\n      <h2>Smart Contract Example</h2>\n      <p>\n        If your contracts compiled and migrated successfully, below will show\n        a stored value of 5 (by default).\n      </p>\n      <p>\n        Try changing the value stored on <strong>line 42</strong> of App.js.\n      </p>\n      <form onSubmit={handleSubmit} className=\"form\">\n        <label>\n          <input type=\"text\" ref={inputRef} onChange={handleChange} className=\"input\" />\n        </label>\n        <input type=\"submit\" value=\"Set\" className=\"button\" />\n      </form>\n      <div>The stored value is: {state.storageValue}</div>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}